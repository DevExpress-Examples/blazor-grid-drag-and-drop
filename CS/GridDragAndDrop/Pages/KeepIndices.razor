@page "/keep-indices"

@inject IJSRuntime JS

<h1>Keep indices in Drag & Drop between Grids</h1>
<br />

<div style="display: flex">
    <div style="width: 500px">
        <h4>First Grid</h4>
        <DxGrid @ref="FirstGrid"
                Data="FirstGridItems" @key=myKey1
                CssClass="first-grid"
                AllowSort="false"
                CustomizeElement="Grid_CustomizeElement">
            <Columns>
                <DxGridDataColumn FieldName="Name" />
            </Columns>
        </DxGrid>
    </div>
    <div style="width: 500px; padding-left: 10px">
        <h4>Second Grid</h4>
        <DxGrid @ref="SecondGrid"
                Data="SecondGridItems" @key=myKey2
                CssClass="second-grid"
                AllowSort="false"
                CustomizeElement="Grid_CustomizeElement">
            <Columns>
                <DxGridDataColumn FieldName="Name" />
            </Columns>
        </DxGrid>
    </div>
</div>

@code {
    bool ReInitializeDragging { get; set; }

    IGrid FirstGrid { get; set; }
    IGrid SecondGrid { get; set; }
    Guid myKey1 { get; set; } = Guid.NewGuid();
    Guid myKey2 { get; set; } = Guid.NewGuid();
    ObservableCollection<GridDataItem> FirstGridItems { get; set; }
    ObservableCollection<GridDataItem> SecondGridItems { get; set; }

    DotNetObjectReference<KeepIndices> DotNetHelper { get; set; }
    IJSObjectReference JsModule { get; set; }

    protected override void OnInitialized() {
        FirstGridItems = new ObservableCollection<GridDataItem>(
            new List<GridDataItem>() {
                new GridDataItem("Beverages"),
                new GridDataItem("Seafood"),
                new GridDataItem("Grains"),
                new GridDataItem("Confections"),
                new GridDataItem("Dairy Products")
            }
        );
        SecondGridItems = new ObservableCollection<GridDataItem>(
            new List<GridDataItem>() {
                new GridDataItem("Cereals"),
                new GridDataItem("Meat"),
                new GridDataItem("Poultry"),
                new GridDataItem("Produce"),
                new GridDataItem("Frozen Entrees")
            }
        );
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            JsModule = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/KeepIndices.razor.js");

            DotNetHelper = DotNetObjectReference.Create(this);
            await JsModule.InvokeVoidAsync("setDotNetHelper", DotNetHelper);
            await JsModule.InvokeVoidAsync("initialize", GetGridSelector(FirstGrid), GetGridSelector(SecondGrid));
        }
        else {
            if (ReInitializeDragging) {
                ReInitializeDragging = false;
                await JsModule.InvokeVoidAsync("initialize", GetGridSelector(FirstGrid), GetGridSelector(SecondGrid));
            }
        }
    }

    void Grid_CustomizeElement(GridCustomizeElementEventArgs e) {
        if (e.ElementType == GridElementType.DataRow)
            e.Attributes["data-visible-index"] = e.VisibleIndex;
    }

    [JSInvokable]
    public void ReorderGridRows(int draggableRowVisibleIndex, int prevRowVisibleIndex, int nextRowVisibleIndex, bool isDraggableRowFromFirstGrid, bool isRowDroppedToFirstGrid) {
        var sourceGrid = isDraggableRowFromFirstGrid ? FirstGrid : SecondGrid;
        var targetGrid = isRowDroppedToFirstGrid ? FirstGrid : SecondGrid;

        var sourceItems = isDraggableRowFromFirstGrid ? FirstGridItems : SecondGridItems;
        var targetItems = isRowDroppedToFirstGrid ? FirstGridItems : SecondGridItems;
        var sourceItem = (GridDataItem)sourceGrid.GetDataItem(draggableRowVisibleIndex);

        var hasPrevRow = prevRowVisibleIndex > -1;
        var hasNextRow = nextRowVisibleIndex > -1;

        if (sourceGrid == targetGrid) {
            var hasSamePosition = hasPrevRow && draggableRowVisibleIndex == prevRowVisibleIndex + 1 || hasNextRow && draggableRowVisibleIndex == nextRowVisibleIndex - 1;
            if (!hasSamePosition) {
                var moveTop = false;
                if (!hasPrevRow || prevRowVisibleIndex <= draggableRowVisibleIndex)
                    moveTop = true;
                var newVisibleIndex = moveTop ? nextRowVisibleIndex : prevRowVisibleIndex;

                var sourceItemIndex = sourceItems.IndexOf(sourceItem);
                var newItemIndex = sourceItems.IndexOf((GridDataItem)sourceGrid.GetDataItem(newVisibleIndex));
                sourceItems.Move(sourceItemIndex, newItemIndex);
            }
        }
        else {
            var newItemIndex = 0;
            if (hasNextRow) {
                var nextItem = (GridDataItem)targetGrid.GetDataItem(nextRowVisibleIndex);
                newItemIndex = targetItems.IndexOf(nextItem);
            }
            else if (hasPrevRow) {
                var prevItem = (GridDataItem)targetGrid.GetDataItem(prevRowVisibleIndex);
                newItemIndex = targetItems.IndexOf(prevItem) + 1;
            }

            sourceItems.Remove(sourceItem);
            targetItems.Insert(newItemIndex, sourceItem);
        }

        myKey1 = Guid.NewGuid();
        myKey2 = Guid.NewGuid();
        ReInitializeDragging = true;
        StateHasChanged();
    }

    static string GetGridSelector(IGrid grid) {
        return string.Join(
            string.Empty,
            grid.CssClass
                .Split(" ")
                .Where(i => !string.IsNullOrWhiteSpace(i))
                .Select(i => "." + i.Trim())
        );
    }

    public record GridDataItem(string Name);
}